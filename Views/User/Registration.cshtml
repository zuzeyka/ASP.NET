@model WebApplication1.Models.Home.User.RegistrationModel
@using WebApplication1.Models.Home.User
@{
    ViewData["Title"] = "Registration";
    var registerValidation = ViewData["registerValidation"] as RegisterValidationModel;
}

<div>
    <h1 class="display-4">Registration of new user</h1>
</div>
<form method="post" asp-controller="User" asp-action="Register" enctype="multipart/form-data">
    <!--Валидация способами Bootstrap (https://getbootstrap.com/docs/5.0/forms/validation/#server-side)
        Обращаем внимание имеено на серверную валидацию:
        1) Элементы формы (input) должны иметь стилевые классы
        is-invalid - красный стиль, неправильное значение
        is-valid - зеленый стиль, правильное значение
        ни одного из этим классов - начальное состояние, без валидации
        2) после элементов форсы добавляются блоки
        <div class="valid-feedback">Message</div>
        <div class="invalid-feedback">Message</div>
        ни одного - стартовое состояние
    -->
  <div class="form-group">
    <label asp-for="Login">Login</label>
    <!--class="form-control" начальное состояние
        (registerValidation is null)
        class="form-control is-valid" позитивный результат валидации
        (registerValidation.LogMessage is null)
        class="form-control is-invalid" негативный результат валидации
        (registerValidation.LogMessage is not null)
    -->
    <input type="text" asp-for="Login" class="form-control @(registerValidation is null
                                                                            ? ""
                                                                            : (registerValidation.LoginMessage is null
                                                                            ? "is-valid"
                                                                            : "is-invalid"))"

                                                            aria-describedby="loginHelp" placeholder="Enter login">
        @if(registerValidation?.LoginMessage is not null)
        {
            <div class="invalid-feedback">
                @registerValidation.LoginMessage
            </div>
        }
    </div>
  <div class="form-group">
    <label asp-for="Password">Password</label>
    <input type="password" asp-for="Password" class="form-control @(registerValidation is null
                                                                            ? ""
                                                                            : (registerValidation.PasswordMessage is null
                                                                            ? "is-valid"
                                                                            : "is-invalid"))"

                                                            aria-describedby="loginHelp" placeholder="Password">
        @if (registerValidation?.PasswordMessage is not null)
        {
                <div class="invalid-feedback">
                @registerValidation.PasswordMessage
                </div>
        } 
  </div>
  <div class="form-group">
    <label asp-for="RepeatPassword">Repeat Password</label>
    <input type="password" asp-for="RepeatPassword" class="form-control @(registerValidation is null
                                                                            ? ""
                                                                            : (registerValidation.RepeatPasswordMessage is null
                                                                            ? "is-valid"
                                                                            : "is-invalid"))"

                                                            placeholder="Repeat Password">
        @if (registerValidation?.RepeatPasswordMessage is not null)
        {
                    <div class="invalid-feedback">
                @registerValidation.RepeatPasswordMessage
                    </div>
        }   
  </div>
  <div class="form-group">
    <label asp-for="Email">Email address</label>
    <input type="email" asp-for="Email" class="form-control @(registerValidation is null
                                                                            ? ""
                                                                            : (registerValidation.EmailMessage is null
                                                                            ? "is-valid"
                                                                            : "is-invalid"))"

                                                            placeholder="name@example.com">
        @if (registerValidation?.EmailMessage is not null)
        {
                        <div class="invalid-feedback">
                @registerValidation.EmailMessage
                        </div>
        }
  </div>
  <div class="form-group">
    <label asp-for="RealName">Name</label>
    <input type="text" asp-for="RealName" class="form-control @(registerValidation is null
                                                                            ? ""
                                                                            : (registerValidation.RealNameMessage is null
                                                                            ? "is-valid"
                                                                            : "is-invalid"))"

                                                            aria-describedby="nameHelp" placeholder="Enter your name">
        @if (registerValidation?.RealNameMessage is not null)
        {
                            <div class="invalid-feedback">
                @registerValidation.RealNameMessage
                            </div>
        }  
  </div>
  <div class="mb-3">
  <label asp-for="Avatar" class="form-label">Upload avatar</label>
  <input asp-for="Avatar" class="form-control" type="file">
  </div>
  <br />
  <button type="submit" class="btn btn-primary">Submit</button>
</form>
<br />
@if (ViewData["registrationModel"] is not null)
{
    // была передача данных
    var registrationModel = ViewData["registrationModel"] as RegistrationModel;
    registerValidation = ViewData["registerValidation"] as RegisterValidationModel;
    foreach (var item in registerValidation)
    {
        if (item is not null)
        {
                           <div class="alert alert-primary" role="alert">
                @item
                           </div>
        }
    }
    <p>
        Данные которые были переданны <br>
        @registrationModel.Login <br>
        @registrationModel.Password <br>
        @registrationModel.RepeatPassword <br>
        @registrationModel.Email <br>
        @registrationModel.RealName <br>
    </p>
}



<hr/>
<h2>Щодо HTML форм</h2>
<p>
    Що таке форма?
    Це засіб HTML/браузера відправляти дані. Форму можна вважати розширенням поняття
    "посилання", яке окрім переходу на задану адресу також пересилає на неї дані 
    (долучає дані до запиту, що формується на цю адресу). Відправлення форми, як і
    перехід за посиланням, руйнує дану сторінку і створює нову з відповіді на запит.
</p>
<p>
    Форма обмежується тегом &lt;form>, на сторінці можут бути довільна кількість форм,
    кожна форма включає у запит тількі ті дані, що належать її контенту (між
    відкритим та закритим тегами). Кожна форма має свою адресу відправлення, тобто
    різні форми можуть посилатись на різні адреси.
</p>
<p>
    Спосіб передачі параметрів визначається з атрибутів форми:<br/>
    <b>method</b>: get (default) або post<br />
    <b>enctype</b>: application/x-www-form-urlencoded (default) або multipart/form-data<br />
    method - один з двох методів НТТР запиту (згідно зі стандартом https://www.rfc-editor.org/rfc/rfc7231#page-22)
    З точки зору форм, метод регулює спосіб включення даних до НТТР-пакету:<br />
    GET : ...?Login=anon&Password=123&...<br />
    дані включаються безпосередньо в URL, утворюючи секцію "query" (параметрів запиту)<br />
    POST : такі саме дані (?Login=anon&Password=123&...) включаються у тіло запиту.
    У складі URL вони не відображаються, для їх аналізу слід відкрити інструмент
    "Network" у консолі браузера, сфокусуватись на даний запит та відкрити таб 
    "Payload"<br />
</p>
<p>
    Як вибрати метод форми?<br />
    GET - коли передаються невеликі дані, що не мають секретності.
    Головна перевага - є можливість створити постійне посилання із певними даними.<br />
    POST - вважається більш захищеним (насправді лише від зовнішнього погляду),
    Головна перевага - можливість передавання великих данних, у т.ч. файлів
</p>
<p>
    Передача файлів за допомогою форм. <br />
    HTML форма здатна передавати файли на сервер, але для цього необхідно забезпечити
    деякі умови:<br />
    - у формі мають бути input-и з типом "file"<br />
    - метод форми - тільки "post"<br />
    - enctype тільки multipart/form-data
</p>
<hr/>
<h2>ASP особливості</h2>
<p>
    ASP методи контроллера можуть автоматично "зібрати" об'єкт моделі <u>за збігом
    імен</u> у класі-моделі та параметрах запиту (query). Для того щоб зв'язування
    відбулось успішно, необхідно забезпечити однаковість імен полів форми та імен
    класу-моделі.
</p>
<p>
    Одни з найпростіших способів забезпечити такий збіг - це використовувати 
    тег-помічники з атрибутом asp-for
</p>
<p>
    Прийом файлу від клієнта та його збереження на боці сервера називається 
    "Upload(ing)". Для прийому файлу у моделі форми слід додати поле з типом
    IFormFile. Подальше зв'язування ASP виконає автоматично (за збігом імен)
</p>