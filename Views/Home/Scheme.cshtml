@{
    ViewData["Title"] = "Interaction Scheme";
}
<div class="text-center">
    <h1 class="display-4">@ViewData["Title"]</h1>
</div>
<p>
    У взаимодействии принимают участие несколько "игроков":<br />
    клиент - браузер или другой потребитель информации<br />
    сервер - бэкенд, который обрабатывает запрос клиента и возвращает данные (HTML / JSON / FILE / ...)
</p>
<p>
    Как проходит запрос:
</p>
<ul>
    <li>
        В браузере нажимается ссылка или вводится URL в адресную строку. Это приводит к тому, что браузер формирует обращение (запрос) к назначеному URL.
    </li>
    <li>
        Браузер определяет IP (локацию) сервера с соотвествующим URL (localhost) и передает к нему сформированный HTTP-запрос
    </li>
    <li>
        Бэкенд состоит из двух слоев: веб-сервер и веб-приложение (Applocation).
        Веб-сервер это программа, которая прослушивает порт, принимает HTTP-запросы, розделяет их параметры, формирует объекты .NET и передает их в приложение.
        По умолчанию для ASP устанавливается IIS от Microsoft.
        Приложение - это скомпилированный код (DLL), созданый из проекта. Процесс постройки DLL и их передачи к IIS называется Deploy. Это объясняет почему изменения в коде
        не сразу отображаются в поведении сайта - их сначала нужно пересобрать в DLL и, может быть, перенести в папки сервера (IIS)
    </li>
    <li>
        После веб-сервера запрос попадает в приложение и проходит обработку.
        Для каждого запроса сервер создает новый объект (экземпляр) контроллера.
        Это делается из соображений безопастности - если первый экземпляр было создано для
        авторизированого пользователя, то следующий запрос от неавторизованого может
        обратится к вещам, которые не должны быть доступнымы для него.
        В то же время, другие объекты не пересоздаются и существуют на протяжении работы приложения.
        Это состовляет основу Scopes - временых рамок существования объектов.
        Singleton - постоянное существование, RequestScope - на протяжении одного запроса,
        Transient - на протяжении одного запроса к объекту программы.
    </li>
    <li>
        После обработки в контроллерах работа передаются на представление (View).
        Формат .cshtml позволяет внедрять коды C# в HTML с использованием
        специального синтаксиса - Razor. Для передачи данных из контроллера к
        представлению. Существуют специальные объекты ViewBag (старый) и ViewData.
        ViewBag - dynamic, может изменить состав полей во время работы,
        ViewData - Dictionary, создает новые данные через индексатор[]<br />

        Данные из ViewBag: <b>@ViewBag.bagdata</b><br />
        Данные из ViewData: <b>@ViewData["data"]</b><br />
    </li>
    <li>
        После того как представление отработало, созданный HTML передается в IIS, он "упаковыевает" HTML в HTTP-ответ (response)
        и передает ее к клиенту (браузер)
    </li>
</ul>