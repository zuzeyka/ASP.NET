@{
    ViewData["Title"] = "Web API";
}
<div class="text-center">
    <h1 class="display-4">@ViewData["Title"]</h1>
</div>

<p>
    API - Application Program Interface - интерфейс взаимодействия программы и приложения
    Программа (в данном контексте) - определенный информационный "центр", который управляет
    данными - сохраняет и распространяет между приложениями<br />
    Приложение (Application) - приложение, которое для своей роботы использует данные, 
    предоставленные программой.<br />
    Интерфейс - способ взаимодействия - набор правил информационного обмена 
</p>
<p>
    Приставка "Web" говориит о использовании HTTP протокола.
    Такие API базируются на возможностях HTTP по передачи данных:
</p>
<ul>
    <li>Метод запроса - литерал (слово) с которого начинается запрос.
        Существуют стандартные методы (GET, POST, PUT, PATCH, DELETE, OPTIONS, HEAD, TRACE)
        розширеные методы - "промышленные" стандарты (LINK, UNLINK, CONNECT, PURGE, ...)
        не стандартные - которые существуют только данного ПО (HELO, QUIT, PASS, ...)
    </li>
    <li>URL - может включать path и query, которые можно менять, укзаывая параметры</li>
    <li>Заголовки (headers) - данные в форме "ключ: значение; параметры" для
        указания деталей запроса - тип контента, длина контента, кодирование символов,
        архивирование (если есть), Cookie, токены и другие
    </li>
    <li>Тело (body) - остаток запроса (после заговолков), которая содержит
        произвольные данные - как текстовые так и бинарные.
    </li>
</ul>
<p>
    API, как правило, предназначено для "машино-машиного" взаимодействия.
    Данные, которые базируются не на человеко-понятных сущностях,
    а на машинных кодах, статусах, токенах, итд. В отличае от MVC, 
    предназначенного для человека, в API уведомления о результатах
    нормально  передавать цифровыми кодами. В Веб-API используются HTTP статус-коды.
</p>
<p>
    Реализация API в ASP. <br />
    Для API используется отдельный вид контроллеров - ApiController (ControllerBase) <br />
    Главные отличия API-контроллеров заключаются в следующем:
</p>
<ul>
    <li>Они не имеют представления, данные от них передаются в форме JSON</li>
    <li>Они имеют постоянный адрес, а разные методы класса визываются 
        в зависимости от метода запроса. <br />
        MVC: GET /ctr/page1, GET /ctr/page2, GET /ctr/page3
        <br />
        API: GET /ctr, POST /ctr, PUT /ctr
    </li>
    <li>Тип возвращения методов как правило отвечает типам данных (объектов),
        для обобщения используется <code>object</code>
    </li>
    <li>Redirect не является необходимым для POST запросов (как в MVC), тут
        все методы фактически равносильны
    </li>
    <li>Испытания - если MVC контроллеры испытывают браузером, то API
        контроллеры - или фронтэндом, или спецпрограммы на примере Postman
    </li>
</ul>

<div class="card col-6">
    <div class="card-body">
        <div class="row">
            <div class="col col-3">
                <button class="btn btn-primary" id="get-button" data-send="GetData">GET</button>
                <button class="btn btn-secondary" id="post-button" data-send="PostData">POST</button>
                <button class="btn btn-success" id="link-button" data-send="LinkData">LINK</button>
                <button class="btn btn-info" id="patch-button" data-send="PatchData">PATCH</button>
                <button class="btn btn-danger" id="unlink-button" data-send="UnlinkData">UNLICK</button>
            </div>
            <div class="col col-6">
                <p id="request-result"></p>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const getButton = document.getElementById("get-button");
        if(getButton) getButton.addEventListener("click", getButtonClick);
        else console.error("'get-button' not found");

        const postButton = document.getElementById("post-button");
        if(postButton) postButton.addEventListener("click", postButtonClick);
        else console.error("'post-button' not found");

        const linkButton = document.getElementById("link-button");
        if(linkButton) linkButton.addEventListener("click", linkButtonClick);
        else console.error("'link-button' not found");

        const patchButton = document.getElementById("patch-button");
        if(patchButton) patchButton.addEventListener("click", patchButtonClick);
        else console.error("'patch-button' not found");

        const unlinkButton = document.getElementById("unlink-button");
        if(unlinkButton) unlinkButton.addEventListener("click", unlinkButtonClick);
        else console.error("'unlink-button' not found");
    });
    function getButtonClick(e){
        const data = e.target.getAttribute("data-send")
        window.fetch("/api/rates?data=" + data)
        .then(r => r.json())
        .then(j => {
            document.getElementById("request-result").innerText = j.result;
        });
    }
    function postButtonClick(e){
        const data = e.target.getAttribute("data-send")
        window.fetch("/api/rates", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({"data": data})
        })
            .then(r => r.json())
            .then(j => {
                document.getElementById("request-result").innerText = j.result;
            });
    }
    function linkButtonClick(e){
        const data = e.target.getAttribute("data-send")
        window.fetch("/api/rates", {
            method: "LINK",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({"data": data})
        })
            .then(r => r.json())
            .then(j => {
                document.getElementById("request-result").innerText = j.result;
            });
    }
    function patchButtonClick(e){
        const data = e.target.getAttribute("data-send")
        window.fetch("/api/rates", {
            method: "PATCH",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({"data": data})
        })
            .then(r => r.json())
            .then(j => {
                document.getElementById("request-result").innerText = j.result;
            });
    }
    function unlinkButtonClick(e){
        const data = e.target.getAttribute("data-send")
        window.fetch("/api/rates", {
            method: "UNLINK",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({"data": data})
        })
            .then(r => r.json())
            .then(j => {
                document.getElementById("request-result").innerText = j.result;
            });
    }
</script>
